<?php

namespace DummyNamespace;

use DummyModelNamespace;
use App\Http\Controllers\Controller;
use Encore\Admin\Controllers\HasResourceActions;
use Encore\Admin\Form;
use Encore\Admin\Grid;
use Encore\Admin\Layout\Content;
use Encore\Admin\Show;

class DummyClass extends Controller
{
    use HasResourceActions;

    private $model_name;

    function __construct() {
        $this->model_name = (new DummyModel)->getTable();
    }
    /**
     * Index interface.
     *
     * @param Content $content
     * @return Content
     */
    public function index(Content $content)
    {
        return $content
            ->header(trans_choice("site.{$this->model_name}",3))
            ->description(trans('admin.list'))
            ->body($this->grid());
    }

    /**
     * Show interface.
     *
     * @param mixed $id
     * @param Content $content
     * @return Content
     */
    public function show($id, Content $content)
    {
        return $content
            ->header(trans_choice("site.{$this->model_name}",1))
            ->description(trans('admin.detail'))
            ->body($this->detail($id));
    }

    /**
     * Edit interface.
     *
     * @param mixed $id
     * @param Content $content
     * @return Content
     */
    public function edit($id, Content $content)
    {
        return $content
            ->header(trans_choice("site.{$this->model_name}",1))
            ->description(trans('admin.edit'))
            ->body($this->form($id)->edit($id));
    }

    /**
     * Create interface.
     *
     * @param Content $content
     * @return Content
     */
    public function create(Content $content)
    {
        return $content
            ->header(trans_choice("site.{$this->model_name}",1))
            ->description(trans('admin.create'))
            ->body($this->form());
    }

    /**
     * Make a grid builder.
     *
     * @return Grid
     */
    protected function grid()
    {
        $l_model_name = $this->model_name;
        $grid = new Grid(new DummyModel);

        $grid->id(trans('admin.ID'));

        $grid->created_at(trans('admin.created_at'));
        $grid->updated_at(trans('admin.updated_at'));

        $grid->actions(function ($actions) use($l_model_name) {
            if(!model_check_permission_edit($l_model_name)){
                $actions->disableEdit();
            }
            if(!model_check_permission_delete($l_model_name)){
                $actions->disableDelete();
            }
            if(!model_check_permission_show($l_model_name)){
                $actions->disableView();
            }
        });
        return $grid;
    }

    /**
     * Make a show builder.
     *
     * @param mixed $id
     * @return Show
     */
    protected function detail($id)
    {
        $l_model_name = $this->model_name;
        $show = new Show(DummyModel::findOrFail($id));

        $show->id(trans('admin.ID'));

        $show->created_at(trans('admin.created_at'));
        $show->updated_at(trans('admin.updated_at'));

        $show->panel()->tools(function($tools) use($l_model_name){
            if(!model_check_permission_list($l_model_name)){
                $tools->disableList();
            }
            if(!model_check_permission_delete($l_model_name)){
                $tools->disableDelete();
            }
            if(!model_check_permission_edit($l_model_name)){
                $tools->disableEdit();
            }
        });

        return $show;
    }

    /**
     * Make a form builder.
     *
     * @return Form
     */
    protected function form($id = null)
    {
        $l_model_name = $this->model_name;
        $form = new Form(new DummyModel);

        $form->display('ID',trans('admin.ID'));

        $form->display('created_at', trans('admin.created_at'));
        $form->display('updated_at', trans('admin.updated_at'));

        $form->tools(function (Form\Tools $tools) use($l_model_name){

            if(!model_check_permission_list($l_model_name)){
                $tools->disableList();
            }

            if(!model_check_permission_delete($l_model_name)){
                $tools->disableDelete();
            }

            if(!model_check_permission_show($l_model_name)){
                $tools->disableView();
            }

        });

        $form->footer(function ($footer) use($l_model_name){

            if(!model_check_permission_create($l_model_name) && !model_check_permission_edit($l_model_name)){
                // disable reset btn
                $footer->disableReset();

                // disable submit btn
                $footer->disableSubmit();
            }

            if(!model_check_permission_show($l_model_name)){
                $footer->disableViewCheck();
            }

            if(!model_check_permission_edit($l_model_name)){
                $footer->disableEditingCheck();
            }

            if(!model_check_permission_create($l_model_name)){
                $footer->disableCreatingCheck();
            }
        });

        return $form;
    }
}
